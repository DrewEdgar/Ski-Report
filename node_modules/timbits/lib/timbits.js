// Generated by CoffeeScript 1.3.3
(function() {
  var Log, assets, ck, config, connectESI, express, fs, jsonp, less, log, pantry, path, querystring, request, server, url, views;

  fs = require('fs');

  path = require('path');

  querystring = require('querystring');

  url = require('url');

  views = require('./timbits-views');

  ck = require('coffeekup');

  Log = require('coloured-log');

  assets = require('connect-assets');

  connectESI = require('connect-esi');

  express = require('express');

  this.pantry = pantry = require('pantry');

  request = require('request');

  jsonp = require('jsonp-filter');

  less = require('connect-less');

  config = {
    appName: 'Timbits',
    engine: 'coffee',
    base: '',
    port: 5678,
    home: process.cwd(),
    maxAge: 60,
    secret: 'secret'
  };

  server = {};

  log = new Log();

  this.serve = function(options) {
    var helper_path, helpers, key, timbit_path, value,
      _this = this;
    for (key in options) {
      value = options[key];
      config[key] = value;
    }
    this.server = express.createServer();
    log = new Log(this.server.settings.env === 'development' ? Log.DEBUG : Log.INFO);
    this.server.register('.coffee', ck);
    this.server.set('views', "" + config.home + "/views");
    this.server.set('view engine', config.engine);
    this.server.set('view options', {
      layout: false
    });
    this.server.set('jsonp callback', true);
    this.server.configure(function() {
      _this.server.use(express.bodyParser());
      _this.server.use(express.cookieParser());
      _this.server.use(express.session({
        secret: config.secret
      }));
      _this.server.use(jsonp.setupJSONP());
      _this.server.use(connectESI.setupESI());
      _this.server.use(express["static"](path.join(config.home, "public")));
      _this.server.use(express["static"](path.join(path.dirname(__filename), "../resources")));
      _this.server.use(assets({
        src: path.join(config.home, "public")
      }));
      return _this.server.use(less({
        src: path.join(config.home, "public")
      }));
    });
    this.server.configure('development', function() {
      return _this.server.use(express.errorHandler({
        dumpExceptions: true,
        showStack: true
      }));
    });
    this.server.configure('production', function() {
      return _this.server.use(express.errorHandler());
    });
    this.server.all("" + config.base + "/", function(req, res) {
      return res.redirect("" + config.base + "/timbits/help");
    });
    this.server.get("" + config.base + "/timbits/json", function(req, res) {
      return res.json(_this.box);
    });
    this.server.all("" + config.base + "/timbits/help", function(req, res) {
      return res.send(ck.render(views.help, {
        box: _this.box
      }));
    });
    this.server.all("" + config.base + "/timbits/test", function(req, res) {
      var master, pending, timbit, _results;
      res.setHeader('Content-Type', 'text/html; charset=UTF-8');
      master = '';
      pending = Object.keys(_this.box).length;
      if (pending) {
        _results = [];
        for (timbit in _this.box) {
          _results.push(request({
            uri: "http://" + req.headers.host + config.base + "/" + timbit + "/test"
          }, function(error, response, body) {
            master += body;
            if (!--pending) {
              return res.end(master);
            }
          }));
        }
        return _results;
      } else {
        master += ck.render(views.test, {});
        return res.end(master);
      }
    });
    helper_path = path.join(config.home, "helpers");
    helpers = {};
    fs.readdir(helper_path, function(err, files) {
      var file, helper_name, _i, _len, _results;
      if (!(err != null)) {
        _results = [];
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          if (file.match(/\.(coffee|js)$/) != null) {
            helper_name = file.substring(0, file.lastIndexOf("."));
            log.info("Loading dynamic helpers: " + helper_name);
            helpers[helper_name] = require(path.join(helper_path, file));
            _results.push(_this.server.helpers(helpers));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    });
    timbit_path = "" + config.home + "/timbits";
    fs.readdir(timbit_path, function(err, files) {
      var file, _i, _len, _results;
      if (err) {
        throw err;
      }
      _results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        if (file.match(/\.(coffee|js)$/) != null) {
          _results.push(_this.add(file.substring(0, file.lastIndexOf(".")), require(path.join(timbit_path, file))));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
    try {
      this.server.listen(process.env.PORT || process.env.C9_PORT || config.port);
      log.info("Timbits server listening on port " + (this.server.address().port) + " in " + this.server.settings.env + " mode");
      server.address = this.server.address().address;
      server.port = this.server.address().port;
    } catch (err) {
      log.error("Server could not start on port " + (process.env.PORT || process.env.C9_PORT || config.port) + ". (" + err + ")");
      console.log("\nPress Ctrl+C to Exit");
      process.kill(process.pid, 'SIGTERM');
    }
    return this.server;
  };

  this.box = {};

  this.add = function(name, timbit) {
    var example, _i, _len, _ref, _ref1, _ref2, _ref3, _results,
      _this = this;
    log.notice("Placing " + name + " in the box");
    timbit.name = name;
    if ((_ref = timbit.viewBase) == null) {
      timbit.viewBase = name;
    }
    if ((_ref1 = timbit.defaultView) == null) {
      timbit.defaultView = 'default';
    }
    if ((_ref2 = timbit.maxAge) == null) {
      timbit.maxAge = config.maxAge;
    }
    timbit.listviews(function(views) {
      return timbit.views = views;
    });
    this.box[name] = timbit;
    this.server.all("" + config.base + "/" + name + "/help", function(req, res) {
      var renderHelp;
      renderHelp = function() {
        return res.send(ck.render(views.timbit_help, timbit));
      };
      return timbit.listviews(function(views) {
        timbit.views = views;
        return renderHelp();
      });
    });
    this.server.all("" + config.base + "/" + name + "/test", function(req, res) {
      return timbit.test("http://" + req.headers.host, timbit, function(results) {
        return res.send(ck.render(views.timbit_test, results));
      });
    });
    this.server.all("" + config.base + "/" + name + "/:view?", function(req, res) {
      var attr, context, k, key, v, value, _base, _ref3, _ref4, _ref5, _ref6, _ref7;
      try {
        context = {};
        _ref3 = req.query;
        for (k in _ref3) {
          v = _ref3[k];
          if ((v != null) && v !== '') {
            context[k.toLowerCase()] = v;
          }
        }
        context.name = timbit.name;
        context.view = "" + timbit.viewBase + "/" + ((_ref4 = (_base = req.params).view) != null ? _ref4 : _base.view = timbit.defaultView);
        context.maxAge = timbit.maxAge;
        _ref5 = timbit.params;
        for (k in _ref5) {
          attr = _ref5[k];
          key = k.toLowerCase();
          if ((_ref6 = context[key]) == null) {
            context[key] = attr["default"];
          }
          value = context[key];
          if (value != null) {
            if ((_ref7 = attr.type) == null) {
              attr.type = 'String';
            }
            switch (attr.type.toLowerCase()) {
              case 'number':
                context[key] = Number(value);
                if (isNaN(context[key])) {
                  throw "" + value + " is not a valid Number for " + key;
                }
                break;
              case 'boolean':
                if (value.toLowerCase() === 'true') {
                  context[key] = true;
                } else if (value.toLowerCase() === 'false') {
                  context[key] = false;
                } else {
                  throw "" + value + " is not a valid value for " + key + ".  Must be true or false.";
                }
                break;
              case 'date':
                context[key] = Date.parse(value);
                if (isNaN(context[key])) {
                  throw "" + value + " is not a valid Date for " + key;
                }
            }
          }
          if (attr.required && !value) {
            throw "" + key + " is a required parameter";
          }
          if (value && attr.strict && attr.values.indexOf(value) === -1) {
            throw "" + value + " is not a valid value for " + key + ".  Must be one of [" + (attr.values.join()) + "]";
          }
          if (value instanceof Array && !attr.multiple) {
            throw "" + key + " must be a single value";
          }
        }
        return timbit.eat(req, res, context);
      } catch (ex) {
        log.error("" + req.url + " - " + ex);
        throw ex;
      }
    });
    if ((config.base != null) && (timbit.examples != null)) {
      _ref3 = timbit.examples;
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        example = _ref3[_i];
        _results.push(example.href = "" + config.base + example.href);
      }
      return _results;
    }
  };

  this.Timbit = (function() {

    function Timbit() {}

    Timbit.prototype.log = log;

    Timbit.prototype.pantry = pantry;

    Timbit.prototype.render = function(req, res, context) {
      var _this = this;
      res.setHeader("Cache-Control", "max-age=" + context.maxAge);
      res.setHeader("Edge-Control", "max-age=" + context.maxAge);
      if (/^\w+\/json$/.test(context.view)) {
        return res.json(context);
      } else {
        return res.render(context.view, context, function(err, str) {
          if (err) {
            log.error(err.toString());
            return res.send("There was an error processing this request.", 500);
          } else {
            if (context.callback != null) {
              res.contentType('application/javascript');
              return res.send("" + context.callback + " ( " + (JSON.stringify(str)) + " );");
            } else {
              return res.send(str);
            }
          }
        });
      }
    };

    Timbit.prototype.fetch = function(req, res, context, options, callback) {
      var name;
      if (callback == null) {
        callback = this.render;
      }
      name = options.name || 'data';
      return pantry.fetch(options, function(error, results) {
        if (context[name] != null) {
          if (Object.prototype.toString.call(context[name][0]) === "[object Array]") {
            context[name].push(results);
          } else {
            context[name] = [context[name], results];
          }
        } else {
          context[name] = results;
        }
        return callback(req, res, context);
      });
    };

    Timbit.prototype.eat = function(req, res, context) {
      return this.render(req, res, context);
    };

    Timbit.prototype.listviews = function(callback) {
      var view;
      view = [];
      return fs.readdir(path.join(config.home, 'views', this.viewBase), function(err, list) {
        var file, _fn, _i, _len;
        if (err || list === void 0) {
          view.push(this.defaultView);
        } else {
          _fn = function(file) {
            if (file.match(/\.coffee/) != null) {
              return view.push(file.substring(0, file.lastIndexOf(".")));
            }
          };
          for (_i = 0, _len = list.length; _i < _len; _i++) {
            file = list[_i];
            _fn(file);
          }
        }
        return callback(view);
      });
    };

    Timbit.prototype.test = function(host, context, callback) {
      var displayTests, results, runTests, testParams, testQueries, testRequest, testRunExamples, testRunQueries;
      results = {
        timbit: context.name,
        views: [],
        required: [],
        optional: [],
        queries: [],
        tests: [],
        warnings: []
      };
      testParams = function() {
        var k, param, v, _ref, _results;
        _ref = context.params;
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          param = "" + k + "=" + v.values[0];
          if (v.required) {
            _results.push(results.required.push(param));
          } else {
            _results.push(results.optional.push(param));
          }
        }
        return _results;
      };
      testQueries = function() {
        return results.queries.push("" + (results.required.concat(results.optional).join('&')));
      };
      testRequest = function(type, uri, callback) {
        return request({
          uri: "" + uri
        }, function(error, response, body) {
          results.tests.push({
            type: type,
            uri: uri,
            status: response.statusCode,
            error: (error != null ? error : '')
          });
          return callback();
        });
      };
      testRunQueries = function(callback) {
        var pending, query, view, _i, _j, _len, _len1, _ref, _ref1, _ref2, _results, _results1;
        if (((_ref = results.queries) != null ? _ref.length : void 0) === 0) {
          pending = results.views.length;
          _ref1 = results.views;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            view = _ref1[_i];
            _results.push((function(view) {
              return testRequest("views", "" + host + config.base + "/" + context.name + "/" + view, function() {
                if (!--pending) {
                  return callback();
                }
              });
            })(view));
          }
          return _results;
        } else {
          pending = results.queries.length * results.views.length;
          _ref2 = results.queries;
          _results1 = [];
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            query = _ref2[_j];
            _results1.push((function(query) {
              var _k, _len2, _ref3, _results2;
              _ref3 = results.views;
              _results2 = [];
              for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
                view = _ref3[_k];
                _results2.push((function(view) {
                  return testRequest("queries", "" + host + config.base + "/" + context.name + "/" + view + "?" + query, function() {
                    if (!--pending) {
                      return callback();
                    }
                  });
                })(view));
              }
              return _results2;
            })(query));
          }
          return _results1;
        }
      };
      testRunExamples = function(callback) {
        var example, pending, _i, _len, _ref, _results;
        if (context.examples != null) {
          pending = context.examples.length;
          _ref = context.examples;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            example = _ref[_i];
            _results.push((function(example) {
              return testRequest("example", "" + host + example.href, function() {
                if (!--pending) {
                  return callback();
                }
              });
            })(example));
          }
          return _results;
        } else {
          return callback();
        }
      };
      runTests = function() {
        testParams();
        testQueries();
        return testRunQueries(function() {
          return testRunExamples(function() {
            return displayTests();
          });
        });
      };
      displayTests = function() {
        var test, warning, _i, _j, _len, _len1, _ref, _ref1;
        log.notice("Testing Timbit - " + context.name);
        _ref = results.tests;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          test = _ref[_i];
          if (test.status >= 400 || (typeof error !== "undefined" && error !== null)) {
            log.error("Test: " + test.type + " URI: " + test.uri + " Status: " + test.status + " Error: " + test.error);
          } else {
            log.info("Test: " + test.type + " URI: " + test.uri + " Status: " + test.status);
          }
        }
        _ref1 = results.warnings;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          warning = _ref1[_j];
          log.warning("Message: " + warning.message);
        }
        return callback(results);
      };
      return this.listviews(function(views) {
        results.views = views;
        return runTests();
      });
    };

    return Timbit;

  })();

}).call(this);
