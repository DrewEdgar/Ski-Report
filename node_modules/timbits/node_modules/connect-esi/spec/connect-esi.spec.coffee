connect = require 'connect'
connectESI = require 'connect-esi'
assert = require 'assert'

data = 'Start. Test data one: <esi:include src="/one.html" /> Test data two: <esi:include src="/two.html"></esi:include> Test data three: <esi:include src=\'/three.html\' /> End.'
esi = new connectESI.processESI data, (err, data) ->
	return
	
module.exports =
	"processESI" : ->	
		assert.equal esi.data, data, "\nprocessESI Expected: #{data}.\nActual: #{esi.data}"		

	"searchESI" : ->	
		esi_arr = esi.searchESI(data)
		assert.equal esi_arr, "/one.html,/two.html,/three.html", "searchESI Expected: #{expected}. Actual: #{esi_arr}"
		assert.equal esi_arr.length, expected=3, "searchESI Expected: #{expected}. Actual: #{esi_arr.length}"

	"fetchESI" : ->				
		esi.fetchESI 'http://www.canada.com/_tech/steve_v/hello.js', (src, status, body) ->
			assert.equal status, expected=200, "fetchESI - HTTP status code. Expected: #{expected}. Actual: #{status}."

		esi.fetchESI ['this will be ignored','http://www.canada.com/_tech/steve_v/hello.js'], (src, status, body) ->
			assert.equal status, expected=200, "fetchESI - HTTP status code. Expected: #{expected}. Actual: #{status}."
	
		esi.fetchESI 'http://www.canada.com/_tech/steve_v/goodbye.js', (src, status, body) ->
			assert.equal status, expected=302, "fetchESI - HTTP status code. Expected: #{expected}. Actual: #{status}."	
	
		esi.fetchESI 'http://www2.canada.com/_tech/steve_v/goodbye.js', (src, status, body) ->
			assert.equal status, expected=404, "fetchESI - HTTP status code. Expected: #{expected}. Actual: #{status}."
	
		esi.fetchESI 'thiswillfail/fail.html', (src, status, body) ->
			assert.equal status, expected=500, "fetchESI - HTTP status code. Expected: #{expected}. Actual: #{status}."

	"subESI" : ->			
		cnt = esi.subESI('', '')
		assert.equal cnt, expected=3, "subESI Expected: #{expected}. Actual: #{cnt}."

		cnt = esi.subESI('/four.html', 'ESI #4')
		assert.equal cnt, expected=3, "subESI Expected: #{expected}. Actual: #{cnt}."
		
		cnt = esi.subESI('/three.html', 'ESI #3')
		assert.equal cnt, expected=2, "subESI Expected: #{expected}. Actual: #{cnt}."		

		cnt = esi.subESI('/one.html', 'ESI #1')
		assert.equal cnt, expected=1, "subESI Expected: #{expected}. Actual: #{cnt}."

		cnt = esi.subESI('/two.html', 'ESI #2')
		assert.equal cnt, expected=0, "subESI Expected: #{expected}. Actual: #{cnt}."
		
		expected = 'Start. Test data one: ESI #1 Test data two: ESI #2 Test data three: ESI #3 End.'
		assert.equal esi.data, expected, "\nsubESI Expected: #{expected}.\nActual: #{esi.data}"

	"lookupESIvar" : ->			
		esi.request['accept-language'] = 'en-us'
		esi.request['connection'] = 'keep-alive'
		esi.request['cookie'] = 'testcookie=123; test2cookie=456'
		esi.request['host'] = 'localhost:5678'
		esi.request['referer'] = 'http://localhost:5678/referrer.html'
		esi.request['user-agent'] = 'Mozilla/5.0'
		esi.request.url.protocol = 'http:'
		esi.request.url.slashes = true
		esi.request.url.host = 'localhost:5678'
		esi.request.url.port = '5678'
		esi.request.url.hostname = 'localhost'
		esi.request.url.href = 'http://localhost:5678/test.html?aaa=111&bbb=222'
		esi.request.url.search = '?aaa=111&bbb=222'
		esi.request.url.query = { aaa: '111', bbb: '222' }
		esi.request.url.pathname = '/test.html'
												
		result = esi.lookupESIvar('HTTP_ACCEPT_LANGUAGE', undefined)		
		assert.equal result, expected='en-us', "lookupESIvar Expected: #{expected}. Actual: #{result}."

		result = esi.lookupESIvar('HTTP_COOKIE', 'test2cookie')		
		assert.equal result, expected='456', "lookupESIvar Expected: #{expected}. Actual: #{result}."
		
		result = esi.lookupESIvar('HTTP_HEADER', 'connection')		
		assert.equal result, expected='keep-alive', "lookupESIvar Expected: #{expected}. Actual: #{result}."

		result = esi.lookupESIvar('HTTP_HOST', undefined)		
		assert.equal result, expected='localhost:5678', "lookupESIvar Expected: #{expected}. Actual: #{result}."
		
		result = esi.lookupESIvar('HTTP_REFERER', undefined)		
		assert.equal result, expected='http://localhost:5678/referrer.html', "lookupESIvar Expected: #{expected}. Actual: #{result}."
		
		result = esi.lookupESIvar('HTTP_USER_AGENT', undefined)		
		assert.equal result, expected='Mozilla/5.0', "lookupESIvar Expected: #{expected}. Actual: #{result}."
		
		result = esi.lookupESIvar('QUERY_STRING', 'bbb')		
		assert.equal result, expected='222', "lookupESIvar Expected: #{expected}. Actual: #{result}."
		
		result = esi.lookupESIvar('QUERY_STRING', undefined)		
		assert.equal result, expected='aaa=111&bbb=222', "lookupESIvar Expected: #{expected}. Actual: #{result}."												

	"processESIvars" : ->			
		esi.request['cookie'] = 'testcookie=123; test2cookie=456'
		esi.request['host'] = ''
		esi.request.url.query = { aaa: '111', bbb: '222' }

		result = esi.processESIvars('http://localhost:5678/test.html?story_id=$(QUERY_STRING{bbb})&other=$(HTTP_COOKIE{testcookie})')		
		assert.equal result, expected='http://localhost:5678/test.html?story_id=222&other=123', "processESIvars Expected: #{expected}. Actual: #{result}."

		result = esi.processESIvars('http://localhost:5678/test.html?story_id=$(QUERY_STRING{does_not_exist}|999)')		
		assert.equal result, expected='http://localhost:5678/test.html?story_id=999', "processESIvars Expected: #{expected}. Actual: #{result}."

		result = esi.processESIvars('http://localhost:5678/test.html?story_id=$(HTTP_HOST|999)')		
		assert.equal result, expected='http://localhost:5678/test.html?story_id=999', "processESIvars Expected: #{expected}. Actual: #{result}."

		result = esi.processESIvars('http://localhost:5678/test.html?story_id=$(VARIABLE_DOES_NOT_EXIST|999)')		
		assert.equal result, expected='http://localhost:5678/test.html?story_id=999', "processESIvars Expected: #{expected}. Actual: #{result}."

		result = esi.processESIvars('http://localhost:5678/test.html?story_id=$(VARIABLE_DOES_NOT_EXIST{test}|999)')		
		assert.equal result, expected='http://localhost:5678/test.html?story_id=999', "processESIvars Expected: #{expected}. Actual: #{result}."

	"execute request (server stopped)" : ->	
		esi = new connectESI.processESI data, (err, data) ->
			assert.ok not err, "execute had the following error: #{err}"
			expected = 'Start. Test data one:  Test data two:  Test data three:  End.'
			assert.equal data, expected, "\nexecute Expected: #{expected}.\nActual: #{data}."	
		esi.request.url.port = 1234
		esi.execute()

	"execute request (server started)" : ->		
		# create server for testing		
		server = connect.createServer()
		server.use connectESI.setupESI()
		server.use (req, res, next) ->
			body = ''
			switch req.url
				when '/one.html' then body = 'ESI #1'
				when '/two.html' then body = 'ESI #2'
				when '/three.html' then body = 'ESI #3'
				else
					body = 'ESI ' + req.url
					res.statusCode = 404
			res.write body
			res.end()
		server.listen 5678

		esi = new connectESI.processESI data, (err, data) ->
			server.close()
			assert.ok not err, "execute had the following error: #{err}"
			expected = 'Start. Test data one: ESI #1 Test data two: ESI #2 Test data three: ESI #3 End.'
			assert.equal data, expected, "\nexecute Expected: #{expected}.\nActual: #{data}."	
		esi.execute()
		
	"execute request (external)" : ->
		esi = new connectESI.processESI "<esi:include src=\"http://www.canada.com/_tech/steve_v/hello.js\" />", (err, data) ->
			assert.ok not err, "execute had the following error: #{err}"
			expected = "document.write('Hello World!');"
			assert.equal data, expected, "\nexecute Expected: #{expected}.\nActual: #{data}."
		esi.execute()
		