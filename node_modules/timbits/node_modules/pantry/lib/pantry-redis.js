// Generated by CoffeeScript 1.3.1
(function() {
  var Log, RedisStorage, redis;

  Log = require('coloured-log');

  redis = require('redis');

  module.exports = RedisStorage = (function() {

    RedisStorage.name = 'RedisStorage';

    function RedisStorage(port, host, options, verbosity) {
      var _this = this;
      if (port == null) {
        port = 6379;
      }
      if (host == null) {
        host = 'localhost';
      }
      if (options == null) {
        options = {};
      }
      if (verbosity == null) {
        verbosity = 'ERROR';
      }
      this.log = new Log(verbosity);
      this.up = false;
      this.client = redis.createClient(port, host);
      this.client.on('end', function() {
        _this.log.warning("Disconnected from Host: " + host + ", Port: " + port);
        return _this.up = false;
      });
      this.client.on('error', function(err) {
        _this.log.error(err.toString());
        return _this.up = false;
      });
      this.client.on('ready', function() {
        _this.log.info("Connected to Host: " + host + ", Port: " + port);
        return _this.up = true;
      });
      if (options.auth != null) {
        this.client.auth(options.auth);
      }
      this.log.notice("New redis storage created");
    }

    RedisStorage.prototype.get = function(key, callback) {
      var _this = this;
      if (this.up) {
        return this.client.get(key, function(err, results) {
          if (err) {
            _this.log.error(err);
          }
          return callback(err, err ? null : JSON.parse(results));
        });
      } else {
        return callback("Redis server currently unavailable");
      }
    };

    RedisStorage.prototype.put = function(resource, callback) {
      var _this = this;
      if (this.up) {
        this.client.set(resource.options.key, JSON.stringify(resource), function(err, results) {
          if (err != null) {
            _this.log.error(err);
            if (callback != null) {
              return callback(err, results);
            }
          } else {
            _this.client.expire(resource.options.key, resource.options.maxLife, function() {});
            if (callback != null) {
              return callback(err, results);
            }
          }
        });
      } else {
        callback("Redis server currently unavailable");
      }
      return this;
    };

    return RedisStorage;

  })();

}).call(this);
