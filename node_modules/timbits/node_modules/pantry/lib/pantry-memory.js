// Generated by CoffeeScript 1.3.1
(function() {
  var Log, MemoryStorage;

  Log = require('coloured-log');

  module.exports = MemoryStorage = (function() {

    MemoryStorage.name = 'MemoryStorage';

    function MemoryStorage(options, verbosity) {
      var k, v;
      if (options == null) {
        options = {};
      }
      if (verbosity == null) {
        verbosity = 'ERROR';
      }
      this.config = {
        capacity: 1000
      };
      for (k in options) {
        v = options[k];
        this.config[k] = v;
      }
      this.log = new Log(verbosity);
      if (!(options.ideal && this.config.ideal <= (this.config.capacity * 0.9))) {
        this.config.ideal = this.config.capacity * 0.9;
      }
      if (this.config.ideal < (this.config.capacity * 0.1)) {
        this.config.ideal = this.config.capacity * 0.1;
      }
      this.clear();
      this.log.notice("New memory storage created");
      this.log.info("Configuration: capacity=" + this.config.capacity + ", ideal=" + this.config.ideal);
    }

    MemoryStorage.prototype.clear = function() {
      this.currentStock = {};
      return this.stockCount = 0;
    };

    MemoryStorage.prototype.get = function(key, callback) {
      callback(null, this.currentStock[key]);
    };

    MemoryStorage.prototype.put = function(resource, callback) {
      if (!(this.currentStock[resource.options.key] != null)) {
        this.stockCount++;
        this.cleanUp();
      }
      this.currentStock[resource.options.key] = resource;
      if (callback != null) {
        callback(null, resource);
      }
      return this;
    };

    MemoryStorage.prototype.remove = function(key) {
      if (this.currentStock[key]) {
        delete this.currentStock[key];
        return this.stockCount--;
      }
    };

    MemoryStorage.prototype.cleanUp = function() {
      var expired, key, now, resource, _i, _len, _ref, _ref1;
      if (this.stockCount > this.config.capacity) {
        this.log.warning("We're over capacity " + this.stockCount + " / " + this.config.ideal + ".  Time to clean up the pantry memory storage");
        now = new Date();
        expired = [];
        _ref = this.currentStock;
        for (key in _ref) {
          resource = _ref[key];
          if (resource.spoilsOn < now) {
            this.log.info("Spoiled " + key);
            this.remove(key);
          } else if (resource.bestBefore < now) {
            expired.push(key);
          }
        }
        if (this.stockCount > this.config.capacity) {
          for (_i = 0, _len = expired.length; _i < _len; _i++) {
            key = expired[_i];
            this.log.notice("Expired " + key);
            this.remove(key);
            if (this.stockCount <= this.config.ideal) {
              break;
            }
          }
        }
        if (this.stockCount > this.config.capacity) {
          _ref1 = this.currentStock;
          for (key in _ref1) {
            resource = _ref1[key];
            this.log.warning("Tossed " + key);
            this.remove(key);
            if (this.stockCount <= this.config.ideal) {
              break;
            }
          }
        }
        return this.log.notice("Cleanup complete.  Currently have " + this.stockCount + " items in stock");
      }
    };

    return MemoryStorage;

  })();

}).call(this);
