/*
 PM Script Manager 1.0
 Postmedia Network Inc
 Built: Sept 26, 2011

 DESCRIPTION:
	The script manager keeps track of previously loaded scripts and will not
	re-load the same script name twice (unless specified). If the page is not
	ready it will insert inline script tags. If the page is ready, it
	will execute an ajax request for the script.

 USAGE:
	Place this script (PM Script Manager) within the HEAD tags of the
	master page, immediately after jQuery but before any other JavaScript includes.
		<script type="text/javascript" src="/js/PMScriptManager-1.0.js"></script>

	Replace existing JavaScript includes:
		<script type="text/javascript" src="/js/myscript.js"></script>
	with the following:
		<script type="text/javascript">PMScriptManager.load('/js/myscript.js');</script>

 FUNCTIONS:
	PMScriptManager.load('[url]',{options});
		url - url for script to load
		options:
		ajax - boolean - execute script request as ajax (otherwise inline). default: false
		async - boolean - execute ajax script request asynchronously/synchronously. default: true
		type - string - used when writing inline scripts. default: 'text/javascript'
		force - boolean - force load of script if there is a conflict. default: false

	PMScriptManager.getLoadedScripts();
		Returns an array of objects containing the info for scripts loaded

	PMScriptManager.getVersion()
		Returns the version number of the PMScriptManager

	PMScriptManager.overrideHost(host);
		Will override host in script url

*/

/* Script Object */
function PMScript(filename, path) {
	this.path = path;
	this.filename = filename;
}

/* Script Array */
function PMScriptManagerCLS(name) {
	this.version = '1.0';
	this.name = name;
	this.hostOverride;
	this.scriptCollection = new Array();
	this.ajaxQueue = new Array();
}

/* Script Manager Functions */
PMScriptManagerCLS.prototype = {
	load: function(url, params) {
		params = params || {};
		default_params = {type: 'text/javascript', ajax: (jQuery !== undefined ? jQuery.isReady : false), async: true, force: false, cache: true};
		for(var property in params) {
			default_params[property] = params[property]; //overwrite default params
		}
		params = default_params;
		var output = '';
		if(typeof(url) !== 'string')
			output += this.writeComment('Error: Script url is required');
		else
		{
			var scriptFilename = this.getFilenameFromPath(url);
			var isLoaded = this.isLoaded(scriptFilename);

			if(isLoaded != null)
				output += this.writeComment('Warning: "' + scriptFilename + '" has been previously loaded.');

			if(isLoaded == null || params.force) {
				if(this.hostOverride != undefined) {
					var tmpurl = document.createElement('a');
					tmpurl.href = url;
					tmpurl.hostname = this.hostOverride;
					url = tmpurl.href;
				}
				this.scriptCollection.push(new PMScript(scriptFilename, url));
				if (params.ajax) {
					ajaxQueue = this.ajaxQueue;
					this.getAjaxScript(url, params.async, params.type, params.cache,
						function(data, textStatus, jqXHR){
							jQuery('head').append(PMScriptManager.writeComment('Loaded "' + this.url + '" with ' + textStatus));
						},
						function(jqXHR, textStatus, errorThrown){
							jQuery('head').append(PMScriptManager.writeComment('Loaded "' + this.url + '" with ' + textStatus + ' ' + errorThrown));
						},
						function(jqXHR, textStatus){
							ajaxQueue.shift();
							if (ajaxQueue.length > 0)
								jQuery.ajax(ajaxQueue[0]);
						});
				}
				else
					document.write('<scr' + 'ipt type="' + params.type + '" src="' + url + '"></scr' + 'ipt>');
				return true;
			}
		}

		if (params.ajax)
			jQuery('head').append(output);
		else
			document.write(output);
		return false;
	},
	isLoaded: function(scriptFilename) {
		for(i=0;i<this.scriptCollection.length;i++)
			if(this.scriptCollection[i].filename == scriptFilename)
				return this.scriptCollection[i];
		return null;
	},
	getFilenameFromPath: function(path) {
		return path.replace(/^.*\//, '');
	},
	getAjaxScript: function(url, async, type, cache, success, error, complete) {
		ajaxParams = {async:async, type:'GET', url:url, data:null, dataType:'script', cache:cache, success:success, error:error, complete:complete};
		this.ajaxQueue.push(ajaxParams);
		if (this.ajaxQueue.length === 1)
			jQuery.ajax(this.ajaxQueue[0]);
	},
	writeComment: function(comment) {
		return '<!-- ' + this.name + ' | ' + comment + ' -->';
	},
	overrideHost: function(host) {
		this.hostOverride = host;
	},
	getLoadedScripts: function() {
		return this.scriptCollection;
	},
	getVersion: function() {
		return this.version;
	}
}

/* Initialize Script Manager */
if(typeof(PMScriptManager) == 'undefined')
	var PMScriptManager = new PMScriptManagerCLS('Postmedia Script Manager');
else {
	var output = PMScriptManager.writeComment('Version "' + PMScriptManager.getVersion() + '" previously loaded');
	if (jQuery.isReady)
		jQuery('head').append(output);
	else
		document.write(output);
}