// Generated by CoffeeScript 1.3.1
(function() {
  var Log, Memcached, MemcachedStorage;

  Log = require('coloured-log');

  Memcached = require('memcached');

  module.exports = MemcachedStorage = (function() {

    MemcachedStorage.name = 'MemcachedStorage';

    function MemcachedStorage(servers, options, verbosity) {
      var _this = this;
      if (servers == null) {
        servers = "localhost:11211";
      }
      if (options == null) {
        options = {};
      }
      if (verbosity == null) {
        verbosity = 'DEBUG';
      }
      this.log = new Log(verbosity);
      this.client = new Memcached(servers, options);
      this.client.on('issue', function(details) {
        return _this.log.warning(details.toString());
      });
      this.client.on('failure', function(details) {
        return _this.log.error(details.toString());
      });
      this.client.on('reconnecting', function(details) {
        return _this.log.notice(details.toString());
      });
      this.client.on('reconnected', function(details) {
        return _this.log.info(details.toString());
      });
      this.client.on('remove', function(details) {
        return _this.log.notice(details.toString());
      });
      this.log.notice("New memcached storage created");
      this.log.info("Servers: " + servers);
    }

    MemcachedStorage.prototype.get = function(key, callback) {
      return this.client.get(key, function(err, results) {
        if (err) {
          this.log.error(err);
        }
        return callback(err, err || results === false ? null : JSON.parse(results));
      });
    };

    MemcachedStorage.prototype.put = function(resource, callback) {
      var _this = this;
      this.client.set(resource.options.key, JSON.stringify(resource), resource.options.maxLife, function(err, results) {
        if (err) {
          _this.log.error(err);
        }
        if (callback != null) {
          return callback(err, results);
        }
      });
      return this;
    };

    return MemcachedStorage;

  })();

}).call(this);
